export const accordionData = [
    {
        title: 'What is React.js and why is it so popular?',
        content: 'React.js is a declarative, efficient, and flexible JavaScript library for building user interfaces, developed and maintained by Facebook. React allows developers to build reusable UI components, making it easier to manage complex UIs in modern web applications. The key feature of React is its use of the Virtual DOM, which efficiently updates and renders only the components that need to be changed when the state of the app changes. React’s ability to optimize updates to the real DOM significantly boosts the performance of web apps. Another reason for React’s popularity is its extensive ecosystem, with tools such as React Router for navigation, Redux for state management, and Next.js for server-side rendering. Moreover, React is used for building not only web apps but also mobile apps with React Native, providing a consistent development experience across platforms.'
    },
    {
        title: 'What is JSX in React?',
        content: 'JSX (JavaScript XML) is a syntax extension for JavaScript used in React to describe the structure of the user interface. JSX allows developers to write HTML-like code inside JavaScript, which is then compiled to `React.createElement()` calls that React understands. While it looks similar to HTML, JSX allows JavaScript expressions to be embedded inside the markup, making it dynamic and interactive. For instance, JSX allows developers to embed variables and function calls inside curly braces, enabling dynamic content rendering. It simplifies the process of defining the UI structure by allowing you to combine JavaScript logic and HTML-like syntax in a single file. JSX helps make code more readable and concise by closely resembling HTML and reducing boilerplate code, but it must be transpiled by tools like Babel to work in browsers.'
    },
    {
        title: 'What are React components and how do they work?',
        content: 'React components are the fundamental building blocks of a React application. A React component is a self-contained unit that encapsulates the structure (UI), behavior (logic), and state (data) of a part of the user interface. Components can either be class-based or function-based, with function components being more common and recommended in modern React. Class components have access to lifecycle methods, while function components can now manage state and lifecycle events through hooks like `useState` and `useEffect`. Components allow for reusability, maintainability, and easy testing. Components can also accept `props` (short for properties), which are inputs passed down from parent components. State is internal data that a component manages, and changes in state can trigger re-rendering, updating the UI accordingly. The power of React comes from its ability to efficiently update and render only the parts of the UI that have changed when state or props change, improving performance.'
    },
    {
        title: 'What is the Virtual DOM in React?',
        content: 'The Virtual DOM (VDOM) is a lightweight, in-memory representation of the actual DOM (Document Object Model) used by browsers. React uses the Virtual DOM to optimize the process of updating the real DOM, which can be slow and inefficient. When a component’s state changes, React first updates the Virtual DOM and compares it with the previous version using a diffing algorithm. This process identifies the smallest changes between the two DOMs. Then, React applies only the necessary updates to the actual DOM, minimizing the number of reflows and repaints, which can be costly in terms of performance. The Virtual DOM enhances React’s performance, especially in complex applications with large amounts of data or frequent UI updates.'
    },
    {
        title: 'What are React Hooks and how do they improve the development experience?',
        content: 'React Hooks are a set of functions introduced in React 16.8 that allow developers to manage state and side effects in functional components. Before hooks, only class components could have state or lifecycle methods, but with hooks, functional components can now handle state (`useState`), perform side effects (`useEffect`), manage context (`useContext`), and handle refs (`useRef`). The introduction of hooks simplifies code by allowing state management and lifecycle functionality within functional components, leading to cleaner, more maintainable code. For example, `useState` allows you to add state to functional components, and `useEffect` is used to handle side effects like fetching data or interacting with external APIs. Hooks also enable the use of custom hooks, allowing you to extract and reuse logic across components. This makes functional components just as powerful as class components but in a simpler and more declarative way.'
    },
    {
        title: 'What is TypeScript and how does it integrate with React?',
        content: 'TypeScript is a superset of JavaScript that adds optional static typing to the language. This allows developers to define types for variables, function parameters, return values, and props, which leads to improved code quality, fewer bugs, and better tooling support. TypeScript helps catch errors at compile-time rather than runtime, providing earlier feedback to developers. In a React application, TypeScript works by adding types to props, state, and event handlers, making the code more predictable and maintainable. React with TypeScript improves the development experience by offering autocompletion, type checking, and inline documentation. By defining interfaces for props and state, developers can ensure that components are used correctly and that the structure of the data passed to components is consistent. TypeScript works seamlessly with React, offering a more robust and scalable approach to building large-scale applications.'
    },
    {
        title: 'What is the difference between TypeScript and JavaScript?',
        content: 'The main difference between TypeScript and JavaScript is that TypeScript is a statically typed superset of JavaScript. TypeScript introduces types, interfaces, and classes to JavaScript, allowing for compile-time checking of types, preventing many runtime errors that would typically be hard to detect in JavaScript. In TypeScript, developers can define variable types, function signatures, and interfaces, leading to a more predictable and reliable codebase. JavaScript, by contrast, is dynamically typed, which means that types are determined during runtime. While TypeScript is more rigid and comes with an initial learning curve, it offers better tooling, code maintainability, and scalability, especially for larger projects or teams. TypeScript compiles down to plain JavaScript, meaning any valid JavaScript code is also valid TypeScript.'
    },
    {
        title: 'How does state management work in React?',
        content: 'In React, state refers to data that is managed within a component and can be updated based on user interaction or external events. Each component can have its own local state, which can be changed by using `useState` in functional components or `this.setState()` in class components. When state changes, React re-renders the component to reflect the new state. However, as applications grow in complexity, managing state in individual components can become challenging, especially when components need to share state with other parts of the application. This is where state management libraries like Redux, Context API, or MobX come into play. Redux is a predictable state container for JavaScript apps that centralizes the' 
    },
    {
        title: 'What is the role of TypeScript in React component development?',
        content: 'In React development, TypeScript plays a vital role in enhancing the safety, maintainability, and scalability of the codebase. By using TypeScript, developers can define explicit types for React component props and state, reducing the chances of passing incorrect data or using components improperly. For instance, when defining props for a component, TypeScript allows you to declare their expected types, ensuring that only the correct type of data is passed to the component. This provides immediate feedback in the development environment and helps catch bugs early in the development cycle. Additionally, TypeScript enables better auto-completion, refactoring, and inline documentation, making the development experience smoother. By using TypeScript in React, developers can build more robust, error-resistant applications, which are especially beneficial in large-scale applications with many developers working on the codebase.'
    },
    {
        title: 'How do you handle forms and validation in React with TypeScript?',
        content: 'Handling forms in React with TypeScript can be slightly more involved due to TypeScript’s type system, but it provides better guarantees for correctness. In React, forms are typically managed using controlled components, where the form data is stored in the component’s state and updated via `onChange` events. When integrating TypeScript, developers can define types for the form state, ensuring that each form.'
    }
];
